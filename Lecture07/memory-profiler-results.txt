Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    10   41.535 MiB    1.113 MiB        1000   @profile(precision=8)
    11                                         def insertionsort(array):
    12                                         
    13   41.535 MiB -1985.191 MiB       49087       for i in range(len(array)):
    14   41.535 MiB -1944.719 MiB       48087           j = i-1
    15   41.535 MiB -1944.719 MiB       48087           v = array[i]
    16   41.535 MiB -33350.613 MiB      826748           while j >= 0 and v < array[j]:
    17   41.535 MiB -31405.859 MiB      778661               array[j+1] = array[j]
    18   41.535 MiB -31405.887 MiB      778661               j -= 1
    19   41.535 MiB -1944.770 MiB       48087           array[j+1] = v
    20   41.535 MiB  -40.473 MiB        1000       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    22   41.508 MiB   41.504 MiB       68296   @profile(precision=8)
    23                                         def quicksort(array):
    24   41.508 MiB    0.004 MiB       68296       if len(array) <= 1:
    25   41.508 MiB    0.000 MiB       34648           return array
    26   41.508 MiB    0.000 MiB       33648       pivot = array[0]
    27   41.508 MiB    0.000 MiB      383313       left = [i for i in array[1:] if i < pivot]
    28   41.508 MiB    0.000 MiB      383313       right = [i for i in array[1:] if i >= pivot]
    29   41.508 MiB    0.000 MiB       33648       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31   41.535 MiB   41.508 MiB       68564   @profile(precision=8)
    32                                         def quicksort_inplace(array, low=0, high=None):
    33   41.535 MiB    0.000 MiB       68564       if len(array) <= 1:
    34   41.535 MiB    0.000 MiB          21           return array
    35   41.535 MiB    0.000 MiB       68543       if high is None:
    36   41.535 MiB    0.000 MiB         979           high = len(array)-1
    37   41.535 MiB    0.000 MiB       68543       if low >= high:
    38   41.535 MiB    0.000 MiB       34761           return array
    39                                         
    40   41.535 MiB    0.008 MiB       33782       pivot = array[high]
    41   41.535 MiB    0.004 MiB       33782       j = low-1
    42   41.535 MiB    0.008 MiB      317302       for i in range(low, high):
    43   41.535 MiB    0.008 MiB      283520           if array[i] <= pivot:
    44   41.535 MiB    0.000 MiB      149979               j += 1
    45   41.535 MiB    0.000 MiB      149979               array[i], array[j] = array[j], array[i]
    46   41.535 MiB    0.000 MiB       33782       array[high], array[j+1] = array[j+1], array[high]
    47   41.535 MiB    0.000 MiB       33782       quicksort_inplace(array, low, j)
    48   41.535 MiB    0.000 MiB       33782       quicksort_inplace(array, j+2, high)
    49   41.535 MiB    0.000 MiB       33782       return array


